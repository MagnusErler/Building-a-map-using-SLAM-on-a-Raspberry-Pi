#!/bin/bash

################################################
# UnusedPkg     1.0 - Emilio Pinna             #
# Find unused packages in your Linux system.   #
################################################

#
#Copyright (C) 2008  Emilio Pinna
#This program is free software: you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.
#

export TEXTDOMAIN=unusedpkg
. gettext.sh


VER=1.0

#
#* version 1.0
# install.sh + blackpanther OS spec file
#* version 0.9
# Gettext localization has been integrated
#* version 0.8
# Ported to blackPanther OS
#* version 0.7
# Fix typos
#* version 0.6
#* version 0.5
#Scan only packages with binary programs: other packages (like libraries) are usually system-purpose and 
#can create false positives. Added -a options.
#* version 0.4
#Update procedure optimized, added warnings, added 'info' command to get time informations of single package 
#

##################################################
# Global variables
##################################################
ALL=0
ONLYSIZE=1MB
ONLYTIME=0
ONLYDAYS=0
QUIET=0

###################################################
# Distribution discover and path set
###################################################


if [ -d /var/lib/dpkg/ ]; then 
	DISTR="apt";
elif [ -d /var/log/packages ]; then 
	DISTR="slackware" 
elif [ -d /var/lib/urpmi/ ]; then 
	DISTR="blackPantherOS" 
else 
	echo $(gettext "Your linux distribution is unsupported by this unusedpkg version")
	exit 1
fi

if [ `whoami` != "root" ]; then
	EXPDIR=`cd ~;pwd`
	DBDIR=$EXPDIR/.unusedpkg
else
	DBDIR=/var/cache/unusedpkg
fi


###################################################
# Functions Distro related
###################################################
if [ $DISTR == "apt" ]; then

		
	PktSize() {
		SZ=`grep "Package: $1$" -A 7 /var/lib/dpkg/status | awk '/Installed-Size:/ { print $2 }'`
	
		#for debian status file where default are Kbytes
		SZRET=`formatsz $SZ "K"`
		echo $SZRET
	}
	
	LastTimePkt() {
		
		# Create regular expression ^/usr/local/bin/|^/usr/bin/|^/bin/
		
		if [ $ALL == 0 ]; then
			
			FULLLIST=`cat $1`
			
			PATHS=^`echo $PATH | sed -e s/:/'\/|^'/g`
			LIST=`cat $1 | grep -E "$PATHS"`
		else
			LIST=`cat $1`
		fi
		
		BIGGER=`stat -c "%x %F" $LIST 2> /dev/null | awk '!/dir/ { print $1 | "sort" }' | tail -n 1`
		if [ "$BIGGER" ]; then 
			BASE=`basename $1 .list`
			echo -e "$BIGGER $BASE" >> $DBDIR/pkglist.tmp
		fi

	}
	
	UpdateList() {
	
		
		LIST=`dpkg -l | grep "^ii" | awk '{ print $2 }'`
		FNUM=`echo $LIST | wc -w`

		Z=0
	
		[ "$QUIET" -eq "0" ] && echo $FNUM packages available.
	
		mkdir -p $DBDIR
		rm $DBDIR/pkglist.tmp &> /dev/null
	
		for n in $LIST; do
			if [ "$QUIET" == 0 ]; then
				echo -ne "[$[Z*100/FNUM]%] `basename $n .list`                                   \r"
			fi
			LastTimePkt /var/lib/dpkg/info/$n.list
			Z=$[Z+1]
		done

		if [ -e $DBDIR/pkglist.tmp ]; then

			cat $DBDIR/pkglist.tmp | uniq | sort > $DBDIR/pkglist
			rm $DBDIR/pkglist.tmp

			if [ "$QUIET" == 0 ]; then
				echo "Database update done.               "
			fi      
		else
			echo "Update failed: database $DBDIR/pkglist.tmp doesn't exist."
			echo ""
			exit 1
		fi
		echo ""
	}

	Info() {
		
		if [ ! $1 ]; then echo "Specify exact package name."; return; fi

		FILE=/var/lib/dpkg/info/$1.list
		if [ ! -f $FILE ]; then echo "Package $1 is not installed, please specify exact name."; return; fi

		echo "Show $1 package informations:"
		echo ""
		grep "Package: $1$" -A 7 /var/lib/dpkg/status
		echo ""
		
		if [ $ALL == 0 ]; then
			
			FULLLIST=`cat $FILE`
			
			PATHS=^`echo $PATH | sed -e s/:/'\/|^'/g`
			LIST=`cat $FILE | grep -E "$PATHS"`
			
			
			 if [ ${#LIST} -lt 1 ]; then echo -e "The package doesn't contain any binary program file in the directories\n$PATH.\nTry with -a option.\n"; return 1; fi
		else
			LIST=`cat $FILE`
			
			 if [ ${#LIST} -lt 1 ]; then echo -e "The package doesn't contain any file\n"; return 1; fi
		fi
		 
		
		TMP=`mktemp`
		stat -c "%n %x %F" $LIST 2> /dev/null | awk '!/dir/ { print $2"\t"$1 | "sort" }' > $TMP
		cat $TMP

		echo ""

		echo "Last access to the package:" `tail -n 1 $TMP | cut -f1`
		echo ""
		rm $TMP
		
	}

fi


if [ $DISTR == "slackware" ]; then
	PktSize() {
		SZ=`awk '/UNCOMPRESSED PACKAGE SIZE/ { print $4 }' /var/log/packages/$1`
	
		SZRET=`formatsz $SZ "K"`
		echo $SZRET
	}

	LastTimePkt() { # $1 filename

		FILESIZE=`wc -l < $1`
		# sed command to add / before every filename
		
		if [ $ALL == 0 ]; then
			FULLLIST=`grep "FILE LIST" -A $FILESIZE $1 | sed -n "2,$FILESIZE s/^/\/&/p"`
			
			PATHS=^`echo $PATH | sed -e s/:/'\/|^'/g`
			LIST=`cat $1 | grep -E "$PATHS"`
		else
			LIST=`grep "FILE LIST" -A $FILESIZE $1 | sed -n "2,$FILESIZE s/^/\/&/p"`
			
		fi


		# binary path grep
		PATHS=^`echo $PATH | sed -e s/:/'\/|^'/g`
		LIST=`cat $1 | grep -E "$PATHS"`

		BIGGER=`stat -c "%x %F" $LIST 2> /dev/null | awk '!/dir/ { print $1 | "sort" }' | tail -n 1`

		if [ "$BIGGER" ]; then
			BASE=`basename $1`
			echo "$BIGGER $BASE" >> $DBDIR/pkglist.tmp
		fi
	}


	UpdateList() {
	
		#QUIET $1 (bool)
	
		FNUM=`ls /var/log/packages/ | wc -l`
		Z=0
	
		[ "$QUIET" -eq "0" ] && echo $FNUM packets to analyze.
	
		mkdir -p $DBDIR
		rm $DBDIR/pkglist.tmp &> /dev/null
	
		for n in `ls /var/log/packages/*`; do
			if [ $QUIET == 0 ]; then
				echo -ne "[$[Z*100/FNUM]%] `basename $n`                                   \r"
			fi
			LastTimePkt $n
			Z=$[Z+1]
		done
	
		if [ -e $DBDIR/pkglist.tmp ]; then

			cat $DBDIR/pkglist.tmp | uniq | sort > $DBDIR/pkglist
			rm $DBDIR/pkglist.tmp

			echo "Database update done.                "
		else
			echo "Update failed: database $DBDIR/pkglist.tmp doesn't exist."
			echo ""
			exit 1
		fi
		
	}
	Info() {


		if [ ! $1 ]; then echo "Specify exact package name."; return; fi

		FILE=/var/log/packages/$1

		if [ ! -f $FILE ]; then echo "Package $1 is not installed, please specify exact name."; return; fi

		FILESIZE=`wc -l < $FILE`

		if [ $ALL == 0 ]; then
			
			FULLLIST=`grep "FILE LIST" -A $FILESIZE $FILE | sed -n "2,$FILESIZE s/^/\/&/p" | grep -v "^/install"`
		
			PATHS=^`echo $PATH | sed -e s/:/'\/|^'/g`
			LIST=`cat $FILE | grep -E "$PATHS"`
			
			if [ ${#LIST} -lt 1 ]; then echo -e "The package doesn't contain any binary program file in the directories\n$PATH.\nTry with -a option.\n"; return 1; fi
		else
			LIST=`grep "FILE LIST" -A $FILESIZE $FILE | sed -n "2,$FILESIZE s/^/\/&/p" | grep -v "^/install"`
			
			if [ ${#LIST} -lt 1 ]; then echo -e "The package doesn't contain any file\n"; return 1; fi
		fi

	        echo "Show $1 package informations:"
		echo ""
		grep "FILE LIST:" -B $FILESIZE $FILE
		echo ""


		TMP=`mktemp`
		stat -c "%n %x %F" $LIST 2> /dev/null | awk '!/dir/ { print $2"\t"$1 | "sort" }' > $TMP
		
		cat $TMP

		for n in $LIST; do
			[ ! -x /$n ] && echo -e "missing file\t $n"
		done
		echo ""

		echo "Last access to the package:" `tail -n 1 $TMP | cut -f1`
		echo ""
		rm $TMP

		

	}


fi


if [ $DISTR == "blackPantherOS" ]; then
	PktSize() {
		SZ=`rpmquery -q --queryformat '%{size}' $1`
	
		SZRET=`formatsz $SZ "B"`
		echo $SZRET
	}

	LastTimePkt() {
		# Create regular expression ^/usr/local/bin/|^/usr/bin/|^/bin/
		FULLLIST=`rpmquery -l $1`
			
		PATHS=^`echo $PATH | sed -e s/:/'\/|^'/g`
		LIST=`rpmquery -l $1 | grep -E "$PATHS"`
		
		BIGGER=`stat -c "%x %F" $LIST 2> /dev/null | awk '!/dir/ { print $1 | "sort" }' | tail -n 1`
		if [ "$BIGGER" ]; then 
			BASE=`basename $1 .list`
			echo -e "$BIGGER $BASE" >> $DBDIR/pkglist.tmp
		fi
	}


	UpdateList() {
	
		#QUIET $1 (bool)
	
		LIST=`rpmquery -qa --queryformat '%{NAME}\n'`
		FNUM=`echo $LIST | wc -w`
		Z=0
	
		[ "$QUIET" -eq "0" ] && echo $FNUM packets to analyze.
	
		mkdir -p $DBDIR
		rm $DBDIR/pkglist.tmp &> /dev/null
	
		for n in `echo $LIST`; do
			if [ $QUIET == 0 ]; then
				echo -ne "[$[Z*100/FNUM]%] `basename $n`                                   \r"
			fi
			LastTimePkt $n
			Z=$[Z+1]
		done
	
		if [ -e $DBDIR/pkglist.tmp ]; then

			cat $DBDIR/pkglist.tmp | uniq | sort > $DBDIR/pkglist
			rm $DBDIR/pkglist.tmp

			echo $(gettext "Database update done.                ")
		else
			echo $(gettext "Update failed: database ")$DBDIR/pkglist.tmp $(gettext " doesn't exist.")
			echo ""
			exit 1
		fi
		
	}


	Info() {
		
		if [ ! $1 ]; then echo $(gettext "Specify exact package name."); return; fi

		FILE=`rpmquery -l $1`
		if [ ! -f $FILE ]; then echo $(gettext "Package") $1 $(gettext "is not installed, please specify exact name."); return; fi

		echo $(gettext "Show") $1 $(gettext"package informations:")
		echo ""
		urpmq -S $1
		echo ""
		
		if [ $ALL == 0 ]; then
			
			FULLLIST=`cat $FILE`
			
			PATHS=^`echo $PATH | sed -e s/:/'\/|^'/g`
			LIST=`cat $FILE | grep -E "$PATHS"`
			
			
			 if [ ${#LIST} -lt 1 ]; then echo -e $(gettext "The package doesn't contain any binary program file in the directories\n")$PATH$(gettext ".\nTry with -a option.\n"); return 1; fi
		else
			LIST=`cat $FILE`
			
			 if [ ${#LIST} -lt 1 ]; then echo -e $(gettext "The package doesn't contain any file\n"); return 1; fi
		fi
		 
		
		TMP=`mktemp`
		stat -c "%n %x %F" $LIST 2> /dev/null | awk '!/dir/ { print $2"\t"$1 | "sort" }' > $TMP
		cat $TMP

		echo ""

		echo $(gettext "Last access to the package:") `tail -n 1 $TMP | cut -f1`
		echo ""
		rm $TMP
		
	}

fi
 


###################################################
# Useful general purpose function: day and size count and formatting
###################################################

chkdateformat() {

	[ `echo $1 | wc -c` == "11" ] && [ `echo $1 | tr -d [:digit:]` == "--" ] && return 0
	echo $1

}


formatsz() {
	# show if there is Byte, KByte, MByte or GByte specified
	# if not, look if $2 specify size unit
	# if not, suppose that are KByte and format it

	UN="KB"

	STR_PART=`echo $1 | tr -d ' ' | tr -d '[:digit:]'`
	if [ `echo $STR_PART | grep -i "K"` ]; then UN="KB";  
	elif [ `echo $STR_PART | grep -i "M"` ]; then UN="MB";  
	elif [ `echo $STR_PART | grep -i "G"` ]; then UN="GB";  
	else 
		if [ "$2" == "B" ]; then UN="B";
		elif [ "$2" == "K" ]; then UN="KB";
		elif [ "$2" == "M" ]; then UN="MB";
		elif [ "$2" == "G" ]; then UN="GB";
		elif [ ! "$2" ]; then UN="KB"; #default
		fi
	fi
	
	NUM=`echo $1 | tr -d '[:alpha:]'`
	RET=$NUM

	# size number accuracy check
	if [ ${#NUM} == 0 ]; then
		RET="0"
	fi
	JUNK=`echo $NUM | tr -d '[:digit:]'`
	if [ ${#JUNK} -ge 1  ]; then
		if [ "$JUNK" == "," ]; then
			RET=`echo $NUM | awk -F',' '{ print $1 }'`
		else
			RET="0";
		fi
	fi


	if [ "$RET" -ge "1048576" ]; then	# 1024*1024
		if [ "$UN" == "B" ]; then UN="MB"; 
		elif [ "$UN" == "KB" ]; then UN="GB";
		fi
		RET=$[RET/1048576]
	elif [ "$RET" -ge "1024" ]; then
		if [ "$UN" == "B" ]; then UN="KB"; 
		elif [ "$UN" == "KB" ]; then UN="MB";
		elif [ "$UN" == "MB" ]; then UN="GB";
		fi
		RET=$[RET/1024]
	fi 
	

	echo $RET$UN
}

sizecompare() {
	
	#if $1>$2 return 1, else 2
	UN1="`echo $1 | tr -d '[:digit:]'`"
	NUM1=`echo $1 | tr -d '[:alpha:]'`
	UN2=`echo $2 | tr -d '[:digit:]'`
	NUM2=`echo $2 | tr -d '[:alpha:]'`

	if [ "$UN1" == "KB" ]; then TOMOLT1="1024"; fi 
	if [ "$UN1" == "MB" ]; then TOMOLT1="1048576"; fi
	if [ "$UN1" == "GB" ]; then TOMOLT1="1073741824"; fi

	if [ "$UN2" == "KB" ]; then TOMOLT2="1024"; fi
	if [ "$UN2" == "MB" ]; then TOMOLT2="1048576"; fi
	if [ "$UN2" == "GB" ]; then TOMOLT2="1073741824"; fi
	
	
	if [ "$[NUM1*TOMOLT1]" -ge "$[NUM2*TOMOLT2]" ]; then
		echo $1
	fi

	if [ "$[NUM1*TOMOLT1]" -lt "$[NUM2*TOMOLT2]" ]; then
		echo $2
	fi

}


dayfrom ()  {

	ANNORIF=1900
	SECOLO=100
	GPA=365
	AGG_GPA=367
	FREQ_BISESTILE=4
	MPA=12
	GPM=31	


	# format yyyy-mm-dd, with trick to eliminate 0's
	giorno=`echo $1 | awk -F- '{ print $3 }'`; giorno=${giorno#0}
	mese=`echo $1 | awk -F- '{ print $2 }'`; mese=${mese#0}
	anno=`echo $1 | awk -F- '{ print $1 }'`;
	
	let "mese = $mese - 2"
	if [ "$mese" -le 0 ]; then
		let "mese += 12"
		let "anno -= 1"
	fi
	let "anno -= $ANNORIF"
	let "totanni = $anno / $SECOLO"
	let "Giorni = $GPA*$anno + $anno/$FREQ_BISESTILE -$totanni + $totanni/$FREQ_BISESTILE + $AGG_GPA*$mese/$MPA + $giorno - $GPM"
	
	echo $Giorni
}

dayold () {	

	D=`date +%Y-%m-%d`
	
	str=""
	
	g_old=`echo $1 | awk -F- '{ print $3 }'`; g_old=${g_old#0}
	m_old=`echo $1 | awk -F- '{ print $2 }'`; m_old=${m_old#0}
	a_old=`echo $1 | awk -F- '{ print $1 }'`;
	
	g_new=`echo $D | awk -F- '{ print $3 }'`; g_new=${g_new#0}
	m_new=`echo $D | awk -F- '{ print $2 }'`; m_new=${m_new#0}
	a_new=`echo $D | awk -F- '{ print $1 }'`;
	
 	let "a_diff = $a_new - $a_old"


	if [ "$a_diff" -ge 1 ]; then
		
		str="$a_diff year"; 
		if [ "$a_diff" -gt 1 ]; then str+="s"; fi
	fi
	

	# se mesevecchio > mesenuovo
	#     mese = 12+mesenuovo-mesevecchio
	# else
	#     mese = mesenuovo - mesevecchio
	# CALCOLO DIFFERENZA MESE
	if [ "$m_old" -gt "$m_new" ]; then
	  let "m_diff = 12 + $m_new - $m_old"
	else
	  let "m_diff = $m_new - $m_old"
	fi
	
	# AGGIORNO STR  PER MESE
	if [ "$m_diff" -gt 0 ]; then
	
	  # METTO L'AND SE C'E' GIA' L'ANNO
	  if [ "$a_diff" -gt 0 ]; then str+=" and "; fi
	  
	  str+="$m_diff month"
	  if [ "$m_diff" -gt 1 ]; then 
	    str+="s"; 
	  fi
	fi
	
	
	if [ "$g_old" -gt "$g_new" ]; then
	  let "g_diff = 30 + $g_new - $g_old"
	else
	  let "g_diff = $g_new - $g_old"
	fi
	
	
	if [ "$g_diff" -gt 0 ]; then
	
	  if [ "$a_diff" -eq 0 ] || [ "$m_diff" -eq 0 ]; then 
	  # STAMPO SOLO SE ALMENO UNO MANCA
	  
		# STAMPO AND SOLO SE UNO C'e' E L'ALTRO MANCA
		if ( [ "$a_diff" -eq 0 ] && ! [ "$m_diff" -eq 0 ];) || (  ! [ "$a_diff" -eq 0 ] && [ "$m_diff" -eq 0 ];) then 
		  str+=" and "
		fi
	      
		str+="$g_diff day"
		# STAMPO LA S SE +D 1
		if [ "$g_diff" -gt 1 ]; then str+="s"; fi
	  
	  fi
	  
	else
	  str+="today"
	fi  
	
	let "gg = $a_diff*365 + $m_diff*30 + $g_diff"
	
	# max is: "12 months and 24 days", 21 characters. 21/8=2, so minimoum \t are 3
	
	let "a = (${#str}/7)-3"
	ammortizzatore=$(printf "%${a#-}s") ; tabs=${ammortizzatore// /\\t};
	
	#echo "${#str} ${a#-}"
	if [ "$2" ]; then
	    echo "$gg"
	else
	    echo "$str $tabs ($gg days)"
	fi
	
	#echo $[`dayfrom $D` - `dayfrom $1`]
}

###############################################
# Listing procedure
###############################################

PrintList() {
	
	if [ "$QUIET" == 0 ]; then
	
		echo $(gettext "WARNING:")
		echo $(gettext "   The reported idle days may be wrong. Before removing packages, check timestamps with" )
		echo $(gettext "   'unusedpkg info <package>' or check the timestamps with 'ls -alu'. See README for more info.")
		echo ""
		echo $(gettext "Minimum packages size: ") $ONLYSIZE
		if [ "$ONLYDAYS" != "0" ]; then echo $(gettext "Packages older than ") $ONLYDAYS $(gettext " days"); fi
		echo ""
		echo -e $(gettext "IDLE DAYS  \tSIZE	PACKAGE NAME")
	fi

	a=1
	IFS=$'\n'

	for n in `cat $DBDIR/pkglist`; do 
		
		C1=`echo $n | awk '{ print $1 }'`
		C2=`echo $n | awk '{ print $2 }'`

		DAYZ=`dayold $C1 1`
		PKTSZ=`PktSize $C2`
		

		# C1 (date) wrong or C2 (name) too small means a wrong line to not parse

		if [ ! `chkdateformat $C2` ] && [ `echo $C2 | wc -c` -lt "2" ]; then
			echo $n >> $DBDIR/errors.log
			continue
		fi

		# days specified check
		if [[ ( ( "$ONLYDAYS" == "0" ) || ( "$DAYZ" -gt "$ONLYDAYS" ) ) &&  ( `sizecompare $PKTSZ $ONLYSIZE` == "$PKTSZ" )  ]]; then
			if [ $QUIET == 0 ]; then
				echo -e "$DAYZ\t\t$PKTSZ\t$C2 "
			else
				echo -e "$C2"
			fi
			let "a++"
		fi
		
		
	done


}

Help() {

  echo $(gettext "Usage:")" $0  update {-q} {-a}"
  echo "       $0 list {"$(gettext "options")"}"
  echo "       $0 info {-a} ["$(gettext "package name")"]"
  echo "       $0 help"
  
  echo ""
  echo $(gettext "Options:")
  echo "	-d ?		- "$(gettext "'list' only packages older than specified days number.")
  echo "	-t yyyy-mm-dd	- "$(gettext "'list' only packages older than specified date.")
  echo "	-s ?[KB,MB,GB]	- "$(gettext "'list' only packages bigger then the specified size. Default value is 1MB" )
  echo "			  "$(gettext "to avoid listing metapackages.")
  echo "	-q		- "$(gettext "'update' silently or 'list' only packages name. Useful in scripts.")
  echo "	-a		- "$(gettext "'update' or get 'info's about every kind of packages. It change default")
  echo "			  "$(gettext "behaviour to get file time statistics only from \$PATH directories.")
    
  echo ""



}


###########################################
# Main part
##########################################


##
# argument check
##

while [ "$1" ]; do

	if [ "$1" == "update" ]; then
		ACTION="update"
	elif [ "$1" == "list" ]; then
		ACTION="list"
	elif [ "$1" == "help" ]; then
		ACTION="help"
	elif [ "$1" == "info" ]; then
		ACTION="info"; INFO="$2"; break
	elif [ "$1" == "-s" ]; then
		ONLYSIZE="$2"
	elif [ "$1" == "-d" ]; then
		ONLYDAYS="$2"
	elif [ "$1" == "-t" ]; then
		ONLYTIME="$2"
	elif [ "$1" == "-q" ]; then
		QUIET=1
	elif [ "$1" == "-a" ]; then
		ALL=1
	elif [ `echo $1 | grep ^[0-9]*[MKG]B$` ] && [ "$ONLYSIZE" != "1MB" ]; then
		true
	elif [ `echo $1 | grep ^[0-9]*$` ] &&  [ "$ONLYDAYS" -ne "0" ]; then
		true
	elif [ ! `chkdateformat $1` ] && [ "$ONLYTIME" != "0" ]; then
		true
	else
		echo $(gettext "Wrong argument")" '$1'."
		echo ""
		Help
		exit 1
	fi

	shift
done

if [ "$QUIET" == 0 ]; then
	echo ""
	echo "* UnusedPkg	$VER"
	echo $(gettext "  Find unused packages in your Linux system.")
	echo ""
fi


if [ "$ACTION" == "help" ]; then

	Help
	exit 1
fi

##
# stat output check
##

if [ ! `chkdateformat | stat -c %x /etc/ | awk '{ print $1 }'` ] && [ "`stat -c "%c %F" /etc/ | grep dir`" ]; then
	echo $(gettext "The `which stat` -c \"%x %F\" command output isn't in")" [YYYY-MM-DD ... "$(gettext "filetype] format")
	exit 1	
fi

if [ "$ACTION" == "update" ]; then

		[ "$QUIET" -eq "0" ] && echo File system scan, it may take some time.
		UpdateList

		exit 0
fi


if [ ! "$ACTION" ]; then

	if [ ! -e $DBDIR/pkglist ]; then
		echo $(gettext "Database")" $DBDIR/pkglist "$(gettext "doesn't exist (first run?). Automatically executing")" '$0" $(gettext "update'.")
		echo ""
		UpdateList
	fi
	
	ACTION="list"

fi

if [ "$ACTION" == "list" ]; then

	
	##
	# pkglist file check
	##
	
	if [ ! -e $DBDIR/pkglist ]; then
		echo $(gettext "Database")" $DBDIR/pkglist "$("doesn't exist (first run?). Please execute '")$0 $(gettext "update'.")
		echo ""
		exit 1
	fi
	
	DATE=`stat -c %x $DBDIR/pkglist 2>/dev/null | awk '{ print $1 }'`
	DIFF=`dayold $DATE 1`
	
	if [ $DIFF -gt 8 ]; then
		echo $(gettext "Database")" $DBDIR/pkglist "$(gettext "seems") $DIFF $(gettext "days old, execute")" $0 "$(gettext "update, or press enter to continue.")
		read
	fi

	if [ "$ONLYTIME" != "0" ]; then
		ONLYDAYS=`dayold $ONLYTIME 1`
	fi


	PrintList 
	
	exit 0
fi


if [ "$ACTION" == "info" ]; then

		Info $INFO
		exit 0
fi
